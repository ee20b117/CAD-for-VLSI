
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `mkAcc.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: mkAcc.v
Parsing Verilog input from `mkAcc.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) parallel_case' comments.
Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Generating RTLIL representation for module `\mkAcc'.
Note: Assuming pure combinatorial block at mkAcc.v:107 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

-- Running command `synth' --

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$mkAcc.v:120$23 in module mkAcc.
Marked 1 switch rules as full_case in process $proc$mkAcc.v:107$14 in module mkAcc.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mkAcc.$proc$mkAcc.v:120$23'.
     1/4: $0\state[1:0]
     2/4: $0\result[127:0]
     3/4: $0\mul_result[127:0]
     4/4: $0\count[6:0]
Creating decoders for process `\mkAcc.$proc$mkAcc.v:107$14'.
     1/2: $1\state$D_IN[1:0]$16
     2/2: $0\state$D_IN[1:0]$15

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\mkAcc.\state$D_IN' from process `\mkAcc.$proc$mkAcc.v:107$14'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mkAcc.\count' using process `\mkAcc.$proc$mkAcc.v:120$23'.
  created $dff cell `$procdff$50' with positive edge clock.
Creating register for signal `\mkAcc.\mul_result' using process `\mkAcc.$proc$mkAcc.v:120$23'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\mkAcc.\result' using process `\mkAcc.$proc$mkAcc.v:120$23'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `\mkAcc.\state' using process `\mkAcc.$proc$mkAcc.v:120$23'.
  created $dff cell `$procdff$53' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\mkAcc.$proc$mkAcc.v:120$23'.
Removing empty process `mkAcc.$proc$mkAcc.v:120$23'.
Found and cleaned up 1 empty switch in `\mkAcc.$proc$mkAcc.v:107$14'.
Removing empty process `mkAcc.$proc$mkAcc.v:107$14'.
Cleaned up 6 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.
<suppressed ~8 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 2 unused cells and 28 unused wires.
<suppressed ~3 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module mkAcc..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAcc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAcc.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 7) from port B of cell mkAcc.$eq$mkAcc.v:88$2 ($eq).
Removed top 1 bits (of 2) from mux cell mkAcc.$ternary$mkAcc.v:92$7 ($mux).
Removed top 6 bits (of 7) from port B of cell mkAcc.$add$mkAcc.v:91$5 ($add).
Removed top 1 bits (of 2) from port B of cell mkAcc.$eq$mkAcc.v:104$13 ($eq).
Removed top 1 bits (of 2) from wire mkAcc.MUX_state$write_1__VAL_1.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~52 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mkAcc:
  creating $macc model for $add$mkAcc.v:103$12 ($add).
  creating $macc model for $add$mkAcc.v:91$5 ($add).
  creating $alu model for $macc $add$mkAcc.v:91$5.
  creating $alu model for $macc $add$mkAcc.v:103$12.
  creating $alu cell for $add$mkAcc.v:103$12: $auto$alumacc.cc:474:replace_alu$55
  creating $alu cell for $add$mkAcc.v:91$5: $auto$alumacc.cc:474:replace_alu$58
  created 2 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAcc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAcc.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.13.9. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register mkAcc.state.

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\mkAcc'.
  found $dff cell for state register: $procdff$53
  root of input selection tree: $0\state[1:0]
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \RST_N
  found state code: 2'00
  found ctrl input: \state$EN
  found ctrl input: \EN_put_val
  found ctrl input: $eq$mkAcc.v:110$17_Y
  found state code: 2'10
  found state code: 2'01
  found ctrl input: $eq$mkAcc.v:88$2_Y
  found ctrl output: \RDY_put_val
  found ctrl output: \result$EN
  found ctrl output: $eq$mkAcc.v:110$17_Y
  ctrl inputs: { $eq$mkAcc.v:88$2_Y \state$EN \EN_put_val \RST_N }
  ctrl outputs: { $0\state[1:0] $eq$mkAcc.v:110$17_Y \result$EN \RDY_put_val }
  transition:       2'00 4'---0 ->       2'00 5'00001
  transition:       2'00 4'-0-1 ->       2'00 5'00001
  transition:       2'00 4'-101 ->       2'10 5'10001
  transition:       2'00 4'-111 ->       2'01 5'01001
  transition:       2'10 4'---0 ->       2'00 5'00100
  transition:       2'10 4'-0-1 ->       2'10 5'10100
  transition:       2'10 4'0101 ->       2'01 5'01100
  transition:       2'10 4'1101 ->       2'00 5'00100
  transition:       2'01 4'---0 ->       2'00 5'00010
  transition:       2'01 4'-0-1 ->       2'01 5'01010
  transition:       2'01 4'-101 ->       2'10 5'10010
  transition:       2'01 4'-111 ->       2'01 5'01010

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$61' from module `\mkAcc'.

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 8 unused cells and 8 unused wires.
<suppressed ~11 debug messages>

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$61' from module `\mkAcc'.
  Removing unused output signal $0\state[1:0] [0].
  Removing unused output signal $0\state[1:0] [1].

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$61' from module `\mkAcc' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$61' from module `\mkAcc':
-------------------------------------

  Information on FSM $fsm$\state$61 (\state):

  Number of input signals:    4
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \RST_N
    1: \EN_put_val
    2: \state$EN
    3: $eq$mkAcc.v:88$2_Y

  Output signals:
    0: \RDY_put_val
    1: \result$EN
    2: $eq$mkAcc.v:110$17_Y

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 4'---0   ->     0 3'001
      1:     0 4'-0-1   ->     0 3'001
      2:     0 4'-101   ->     1 3'001
      3:     0 4'-111   ->     2 3'001
      4:     1 4'---0   ->     0 3'100
      5:     1 4'1101   ->     0 3'100
      6:     1 4'-0-1   ->     1 3'100
      7:     1 4'0101   ->     2 3'100
      8:     2 4'---0   ->     0 3'010
      9:     2 4'-101   ->     1 3'010
     10:     2 4'-111   ->     2 3'010
     11:     2 4'-0-1   ->     2 3'010

-------------------------------------

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$61' from module `\mkAcc'.

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.
<suppressed ~1 debug messages>

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAcc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAcc.
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$80: { $auto$fsm_map.cc:74:implement_pattern_cache$70 $auto$fsm_map.cc:118:implement_pattern_cache$74 $auto$fsm_map.cc:118:implement_pattern_cache$78 }
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$106: { $auto$fsm_map.cc:118:implement_pattern_cache$100 $auto$fsm_map.cc:118:implement_pattern_cache$94 $auto$fsm_map.cc:118:implement_pattern_cache$104 }
    New input vector for $reduce_or cell $auto$fsm_map.cc:105:implement_pattern_cache$99: { \state [0] \state [2] }
  Optimizing cells in module \mkAcc.
Performed a total of 3 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAcc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAcc.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=128\B_WIDTH=128\Y_WIDTH=128 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=128 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1292 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.
<suppressed ~177 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 157 unused cells and 95 unused wires.
<suppressed ~158 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\mkAcc' to `<abc-temp-dir>/input.blif'..
Extracted 1566 gates and 1964 wires to a netlist network with 396 inputs and 267 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       31
ABC RESULTS:            ANDNOT cells:      367
ABC RESULTS:              AOI3 cells:       88
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:      263
ABC RESULTS:              NAND cells:      104
ABC RESULTS:               NOR cells:       31
ABC RESULTS:               NOT cells:      206
ABC RESULTS:              OAI3 cells:      116
ABC RESULTS:                OR cells:       56
ABC RESULTS:             ORNOT cells:       35
ABC RESULTS:              XNOR cells:      143
ABC RESULTS:               XOR cells:      132
ABC RESULTS:        internal signals:     1301
ABC RESULTS:           input signals:      396
ABC RESULTS:          output signals:      267
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAcc.
<suppressed ~128 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAcc'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAcc..
Removed 0 unused cells and 1175 unused wires.
<suppressed ~6 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== mkAcc ===

   Number of wires:               1326
   Number of wire bits:           2229
   Number of public wires:          14
   Number of public wire bits:     657
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1839
     $_ANDNOT_                     367
     $_AND_                         31
     $_AOI3_                        88
     $_AOI4_                         1
     $_DFF_P_                      266
     $_MUX_                        263
     $_NAND_                       104
     $_NOR_                         31
     $_NOT_                        206
     $_OAI3_                       116
     $_ORNOT_                       35
     $_OR_                          56
     $_XNOR_                       143
     $_XOR_                        132

2.27. Executing CHECK pass (checking for obvious problems).
checking module mkAcc..
found and reported 0 problems.

-- Writing to `mkAcc.blif' using backend `blif' --

3. Executing BLIF backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 11bf4a51f5
CPU: user 0.60s system 0.01s, MEM: 25.66 MB total, 19.80 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 16x opt_clean (0 sec), 15% 13x opt_merge (0 sec), ...
