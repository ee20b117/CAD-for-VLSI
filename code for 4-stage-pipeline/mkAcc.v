//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Dec 11 01:23:19 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_val                    O     1
// get_val                        O   128 reg
// RDY_get_val                    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_val_data                   I   128 reg
// EN_put_val                     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAcc(CLK,
	     RST_N,

	     put_val_data,
	     EN_put_val,
	     RDY_put_val,

	     get_val,
	     RDY_get_val);
  input  CLK;
  input  RST_N;

  // action method put_val
  input  [127 : 0] put_val_data;
  input  EN_put_val;
  output RDY_put_val;

  // value method get_val
  output [127 : 0] get_val;
  output RDY_get_val;

  // signals for module outputs
  wire [127 : 0] get_val;
  wire RDY_get_val, RDY_put_val;

  // register count
  reg [6 : 0] count;
  wire [6 : 0] count$D_IN;
  wire count$EN;

  // register mul_result
  reg [127 : 0] mul_result;
  wire [127 : 0] mul_result$D_IN;
  wire mul_result$EN;

  // register result
  reg [127 : 0] result;
  wire [127 : 0] result$D_IN;
  wire result$EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state$D_IN;
  wire state$EN;

  // inputs to muxes for submodule ports
  wire [6 : 0] MUX_count$write_1__VAL_1;
  wire [1 : 0] MUX_state$write_1__VAL_1;

  // action method put_val
  assign RDY_put_val = state == 2'd0 ;

  // value method get_val
  assign get_val = result ;
  assign RDY_get_val = count == 7'd1 && state == 2'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__VAL_1 = count + 7'd1 ;
  assign MUX_state$write_1__VAL_1 = (count == 7'd1) ? 2'd0 : 2'd1 ;

  // register count
  assign count$D_IN = (state == 2'd1) ? MUX_count$write_1__VAL_1 : 7'd0 ;
  assign count$EN = state == 2'd1 || EN_put_val ;

  // register mul_result
  assign mul_result$D_IN = put_val_data ;
  assign mul_result$EN = EN_put_val ;

  // register result
  assign result$D_IN = result + mul_result ;
  assign result$EN = state == 2'd1 ;

  // register state
  always@(state or MUX_state$write_1__VAL_1 or EN_put_val)
  begin
    case (1'b1) // synopsys parallel_case
      state == 2'd2: state$D_IN = MUX_state$write_1__VAL_1;
      EN_put_val: state$D_IN = 2'd1;
      state == 2'd1: state$D_IN = 2'd2;
      default: state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign state$EN = state == 2'd2 || EN_put_val || state == 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	mul_result <= `BSV_ASSIGNMENT_DELAY 128'd0;
	result <= `BSV_ASSIGNMENT_DELAY 128'd0;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (mul_result$EN)
	  mul_result <= `BSV_ASSIGNMENT_DELAY mul_result$D_IN;
	if (result$EN) result <= `BSV_ASSIGNMENT_DELAY result$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 7'h2A;
    mul_result = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    result = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAcc

